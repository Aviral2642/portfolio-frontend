{"version":3,"file":"static/js/572.ff0c187d.chunk.js","mappings":"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","sources":["../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","../node_modules/react-intersection-observer/src/useInView.tsx","components/Sparkline.js","data/skills.js","components/ExpertiseSection.js","components/Reveal.js","../node_modules/framer-motion/dist/es/animation/hooks/animation-controls.mjs","../node_modules/framer-motion/dist/es/animation/hooks/use-animation.mjs"],"sourcesContent":["import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>(onChange);\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element | undefined>(undefined);\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n","import React, { useMemo } from 'react';\nimport styled from 'styled-components';\n\nconst Wrap = styled.div`\n  width: 100%;\n  height: 28px;\n`;\n\nconst Svg = styled.svg`\n  width: 100%;\n  height: 100%;\n  overflow: visible;\n`;\n\nconst Line = styled.path`\n  fill: none;\n  stroke: url(#sparkGrad);\n  stroke-width: 2;\n  filter: drop-shadow(0 0 8px rgba(102, 126, 234, 0.4));\n`;\n\nconst Area = styled.path`\n  fill: url(#sparkArea);\n  opacity: 0.25;\n`;\n\nconst Sparkline = ({ data = [], colorStart = '#667eea', colorEnd = '#f093fb' }) => {\n  const points = useMemo(() => {\n    const n = data.length;\n    if (n === 0) return '';\n    const max = Math.max(...data);\n    const min = Math.min(...data);\n    const range = Math.max(1, max - min);\n    return data\n      .map((v, i) => {\n        const x = (i / (n - 1)) * 100;\n        const y = 100 - ((v - min) / range) * 100;\n        return `${x},${y}`;\n      })\n      .join(' ');\n  }, [data]);\n\n  if (!data.length) return null;\n\n  // Build path d attributes\n  const dLine = `M ${points.replace(/ /g, ' L ')}`;\n  const dArea = `M 0,100 L ${points.replace(/ /g, ' L ')} L 100,100 Z`;\n\n  return (\n    <Wrap aria-hidden=\"true\">\n      <Svg viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\">\n        <defs>\n          <linearGradient id=\"sparkGrad\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n            <stop offset=\"0%\" stopColor={colorStart} />\n            <stop offset=\"100%\" stopColor={colorEnd} />\n          </linearGradient>\n          <linearGradient id=\"sparkArea\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor={colorStart} stopOpacity=\"0.6\" />\n            <stop offset=\"100%\" stopColor={colorEnd} stopOpacity=\"0\" />\n          </linearGradient>\n        </defs>\n        <Area d={dArea} />\n        <Line d={dLine} />\n      </Svg>\n    </Wrap>\n  );\n};\n\nexport default Sparkline;\n\n\n","export const skills = [\n  {\n    id: 1,\n    title: 'Offensive Security',\n    level: 95,\n    description: 'Red teaming, penetration testing, exploit development, and adversary emulation',\n    color: '#667eea',\n    category: 'cybersecurity',\n    featured: true\n  },\n  {\n    id: 2,\n    title: 'AI x Cybersecurity',\n    level: 90,\n    description: 'Adversarial ML, secure LLMs, AI security research, and automated attacks',\n    color: '#764ba2',\n    category: 'ai',\n    featured: true\n  },\n  {\n    id: 3,\n    title: 'Red Teaming',\n    level: 92,\n    description: 'MITRE ATT&CK, APT simulation, and advanced persistent threat emulation',\n    color: '#f093fb',\n    category: 'cybersecurity',\n    featured: true\n  },\n  {\n    id: 4,\n    title: 'Cryptography',\n    level: 88,\n    description: 'Cryptographic protocols, secure implementations, and crypto analysis',\n    color: '#51cf66',\n    category: 'cybersecurity',\n    featured: true\n  },\n  {\n    id: 5,\n    title: 'Cloud Security',\n    level: 85,\n    description: 'AWS security, DevSecOps, container security, and cloud governance',\n    color: '#ff6b6b',\n    category: 'cloud',\n    featured: true\n  },\n  {\n    id: 6,\n    title: 'Malware Analysis',\n    level: 90,\n    description: 'Reverse engineering, static/dynamic analysis, and threat intelligence',\n    color: '#ffd43b',\n    category: 'cybersecurity',\n    featured: false\n  },\n  {\n    id: 7,\n    title: 'Python',\n    level: 95,\n    description: 'Security tool development, automation, and scripting',\n    color: '#3776ab',\n    category: 'programming',\n    featured: false\n  },\n  {\n    id: 8,\n    title: 'C/C++',\n    level: 85,\n    description: 'Low-level programming, kernel development, and system programming',\n    color: '#00599c',\n    category: 'programming',\n    featured: false\n  }\n];\n\nexport const getFeaturedSkills = () => skills.filter(skill => skill.featured);\nexport const getSkillsByCategory = (category) => skills.filter(skill => skill.category === category);\nexport const getSkillById = (id) => skills.find(skill => skill.id === id);\n","import React from 'react';\nimport { motion, useAnimation } from 'framer-motion';\nimport styled from 'styled-components';\nimport { useInView } from 'react-intersection-observer';\nimport Reveal from './Reveal';\nimport Sparkline from './Sparkline';\nimport { getFeaturedSkills } from '../data/skills';\n\nconst Section = styled.section`\n  padding: var(--section-padding);\n  background: var(--bg-secondary);\n  position: relative;\n  overflow: hidden;\n`;\n\nconst Container = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 20px;\n`;\n\nconst SectionTitle = styled(motion.h2)`\n  font-family: var(--font-display);\n  font-size: 3rem;\n  font-weight: 900;\n  text-align: center;\n  margin-bottom: 80px;\n  position: relative;\n  background: var(--gradient-secondary);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  \n  &::after {\n    content: '';\n    position: absolute;\n    bottom: -20px;\n    left: 50%;\n    transform: translateX(-50%);\n    width: 100px;\n    height: 4px;\n    background: var(--gradient-primary);\n    border-radius: 2px;\n  }\n`;\n\nconst TitleIcon = styled.span`\n  font-size: 2.5rem;\n  margin-right: 20px;\n  background: var(--gradient-primary);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n`;\n\nconst SkillsGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 30px;\n`;\n\nconst SkillCard = styled(motion.div)`\n  background: var(--bg-card);\n  border: 1px solid var(--border-color);\n  border-radius: var(--border-radius);\n  padding: 40px 30px;\n  text-align: center;\n  transition: var(--transition-normal);\n  position: relative;\n  overflow: hidden;\n  \n  &::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(102, 126, 234, 0.1), transparent);\n    transition: var(--transition-slow);\n  }\n  \n  &:hover {\n    transform: translateY(-10px);\n    border-color: var(--blue-primary);\n    box-shadow: var(--shadow-glow);\n  }\n  \n  &:hover::before {\n    left: 100%;\n  }\n`;\n\nconst SkillIcon = styled.div`\n  font-size: 3rem;\n  margin-bottom: 20px;\n  animation: iconFloat 3s ease-in-out infinite;\n  \n  @keyframes iconFloat {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-10px); }\n  }\n`;\n\nconst SkillTitle = styled.h3`\n  font-size: 1.5rem;\n  font-weight: 700;\n  margin-bottom: 15px;\n  color: var(--text-primary);\n`;\n\nconst SkillDescription = styled.p`\n  color: var(--text-secondary);\n  margin-bottom: 25px;\n  font-size: 14px;\n`;\n\nconst SkillBar = styled.div`\n  width: 100%;\n  height: 6px;\n  background: var(--bg-tertiary);\n  border-radius: 3px;\n  overflow: hidden;\n  position: relative;\n`;\n\nconst SkillProgress = styled(motion.div)`\n  height: 100%;\n  background: var(--gradient-primary);\n  border-radius: 3px;\n  position: relative;\n  \n  &::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);\n    animation: shimmer 2s ease-in-out infinite;\n  }\n  \n  @keyframes shimmer {\n    0% { transform: translateX(-100%); }\n    100% { transform: translateX(100%); }\n  }\n`;\n\nconst ExpertiseSection = () => {\n  const [ref, inView] = useInView({\n    threshold: 0.1,\n    triggerOnce: false\n  });\n  \n  const controls = useAnimation();\n\n  React.useEffect(() => {\n    if (inView) {\n      controls.start('visible');\n    }\n  }, [controls, inView]);\n\n  const containerVariants = {\n    hidden: { opacity: 0, y: 50 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.8,\n        staggerChildren: 0.2\n      }\n    }\n  };\n\n  const hoverVariants = {\n    scale: 1.05,\n    transition: { duration: 0.3 }\n  };\n\n  const tapVariants = {\n    scale: 0.95,\n    transition: { duration: 0.1 }\n  };\n\n  const skills = getFeaturedSkills();\n\n  return (\n    <Section id=\"expertise\" ref={ref}>\n      <Container>\n        <motion.div\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate={controls}\n        >\n          <SectionTitle>\n            <TitleIcon>🧩</TitleIcon>\n            Expertise\n          </SectionTitle>\n\n          <SkillsGrid>\n            {skills.map((skill, index) => (\n              <Reveal key={skill.title} delay={index * 0.06}>\n                <SkillCard\n                  variants={containerVariants}\n                  whileHover={hoverVariants}\n                  whileTap={tapVariants}\n                  style={{ animationDelay: `${index * 0.1}s` }}\n                >\n                  <SkillIcon style={{ color: skill.color }}>\n                    {skill.icon}\n                  </SkillIcon>\n                  <SkillTitle>{skill.title}</SkillTitle>\n                  <SkillDescription>{skill.description}</SkillDescription>\n                  <Sparkline data={skill.trend} colorStart={skill.color} colorEnd={`${skill.color}`} />\n                  <SkillBar>\n                    <SkillProgress\n                      initial={{ width: 0 }}\n                      animate={inView ? { width: `${skill.level}%` } : { width: 0 }}\n                      transition={{ duration: 2, delay: index * 0.2 }}\n                      style={{ background: `linear-gradient(90deg, ${skill.color}, ${skill.color}88)` }}\n                    />\n                  </SkillBar>\n                </SkillCard>\n              </Reveal>\n            ))}\n          </SkillsGrid>\n        </motion.div>\n      </Container>\n    </Section>\n  );\n};\n\nexport default ExpertiseSection;\n","import React from 'react';\nimport { motion } from 'framer-motion';\n\nconst variants = {\n  hidden: { opacity: 0, y: 24 },\n  visible: { opacity: 1, y: 0, transition: { duration: 0.6 } },\n};\n\nconst Reveal = ({ children, delay = 0 }) => (\n  <motion.div\n    variants={variants}\n    initial=\"hidden\"\n    whileInView=\"visible\"\n    viewport={{ once: true, margin: '-10% 0px -10% 0px' }}\n    transition={{ delay }}\n  >\n    {children}\n  </motion.div>\n);\n\nexport default Reveal;\n\n\n","import { invariant } from '../../utils/errors.mjs';\nimport { setValues } from '../../render/utils/setters.mjs';\nimport { animateVisualElement } from '../interfaces/visual-element.mjs';\n\nfunction stopAnimation(visualElement) {\n    visualElement.values.forEach((value) => value.stop());\n}\n/**\n * @public\n */\nfunction animationControls() {\n    /**\n     * Track whether the host component has mounted.\n     */\n    let hasMounted = false;\n    /**\n     * A collection of linked component animation controls.\n     */\n    const subscribers = new Set();\n    const controls = {\n        subscribe(visualElement) {\n            subscribers.add(visualElement);\n            return () => void subscribers.delete(visualElement);\n        },\n        start(definition, transitionOverride) {\n            invariant(hasMounted, \"controls.start() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            const animations = [];\n            subscribers.forEach((visualElement) => {\n                animations.push(animateVisualElement(visualElement, definition, {\n                    transitionOverride,\n                }));\n            });\n            return Promise.all(animations);\n        },\n        set(definition) {\n            invariant(hasMounted, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            return subscribers.forEach((visualElement) => {\n                setValues(visualElement, definition);\n            });\n        },\n        stop() {\n            subscribers.forEach((visualElement) => {\n                stopAnimation(visualElement);\n            });\n        },\n        mount() {\n            hasMounted = true;\n            return () => {\n                hasMounted = false;\n                controls.stop();\n            };\n        },\n    };\n    return controls;\n}\n\nexport { animationControls };\n","import { animationControls } from './animation-controls.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\n\n/**\n * Creates `AnimationControls`, which can be used to manually start, stop\n * and sequence animations on one or more components.\n *\n * The returned `AnimationControls` should be passed to the `animate` property\n * of the components you want to animate.\n *\n * These components can then be animated with the `start` method.\n *\n * ```jsx\n * import * as React from 'react'\n * import { motion, useAnimation } from 'framer-motion'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <motion.div animate={controls} />\n * }\n * ```\n *\n * @returns Animation controller with `start` and `stop` methods\n *\n * @public\n */\nfunction useAnimationControls() {\n    const controls = useConstant(animationControls);\n    useIsomorphicLayoutEffect(controls.mount, []);\n    return controls;\n}\nconst useAnimation = useAnimationControls;\n\nexport { useAnimation, useAnimationControls };\n"],"names":["observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","map","concat","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","forEach","entry","_a","inView","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","useInView","delay","rootMargin","triggerOnce","skip","initialInView","onChange","ref","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result","Wrap","styled","div","_templateObject","_taggedTemplateLiteral","Svg","svg","_templateObject2","Line","path","_templateObject3","Area","_templateObject4","_ref","data","colorStart","colorEnd","points","useMemo","n","max","Math","min","range","v","i","y","join","dLine","replace","dArea","_jsx","children","_jsxs","viewBox","preserveAspectRatio","x1","y1","x2","y2","offset","stopColor","stopOpacity","d","skills","title","level","description","color","category","featured","getFeaturedSkills","skill","Section","section","Container","SectionTitle","motion","h2","TitleIcon","span","SkillsGrid","_templateObject5","SkillCard","_templateObject6","SkillIcon","_templateObject7","SkillTitle","h3","_templateObject8","SkillDescription","p","_templateObject9","SkillBar","_templateObject0","SkillProgress","_templateObject1","ExpertiseSection","controls","useAnimation","start","containerVariants","hidden","opacity","visible","transition","duration","staggerChildren","hoverVariants","scale","tapVariants","variants","initial","animate","index","Reveal","whileHover","whileTap","style","animationDelay","icon","Sparkline","trend","width","background","whileInView","viewport","once","margin","animationControls","hasMounted","subscribers","Set","subscribe","visualElement","add","definition","transitionOverride","invariant","animations","animateVisualElement","Promise","all","setValues","stop","values","value","stopAnimation","mount","useConstant","useIsomorphicLayoutEffect"],"sourceRoot":""}