{"version":3,"file":"static/js/997.5fb1be5d.chunk.js","mappings":"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","sources":["../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","../node_modules/react-intersection-observer/src/useInView.tsx","../node_modules/framer-motion/dist/es/animation/hooks/animation-controls.mjs","../node_modules/framer-motion/dist/es/animation/hooks/use-animation.mjs","components/ContactForm.js","components/ContactSection.js"],"sourcesContent":["import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>(onChange);\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element | undefined>(undefined);\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n","import { invariant } from '../../utils/errors.mjs';\nimport { setValues } from '../../render/utils/setters.mjs';\nimport { animateVisualElement } from '../interfaces/visual-element.mjs';\n\nfunction stopAnimation(visualElement) {\n    visualElement.values.forEach((value) => value.stop());\n}\n/**\n * @public\n */\nfunction animationControls() {\n    /**\n     * Track whether the host component has mounted.\n     */\n    let hasMounted = false;\n    /**\n     * A collection of linked component animation controls.\n     */\n    const subscribers = new Set();\n    const controls = {\n        subscribe(visualElement) {\n            subscribers.add(visualElement);\n            return () => void subscribers.delete(visualElement);\n        },\n        start(definition, transitionOverride) {\n            invariant(hasMounted, \"controls.start() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            const animations = [];\n            subscribers.forEach((visualElement) => {\n                animations.push(animateVisualElement(visualElement, definition, {\n                    transitionOverride,\n                }));\n            });\n            return Promise.all(animations);\n        },\n        set(definition) {\n            invariant(hasMounted, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            return subscribers.forEach((visualElement) => {\n                setValues(visualElement, definition);\n            });\n        },\n        stop() {\n            subscribers.forEach((visualElement) => {\n                stopAnimation(visualElement);\n            });\n        },\n        mount() {\n            hasMounted = true;\n            return () => {\n                hasMounted = false;\n                controls.stop();\n            };\n        },\n    };\n    return controls;\n}\n\nexport { animationControls };\n","import { animationControls } from './animation-controls.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\n\n/**\n * Creates `AnimationControls`, which can be used to manually start, stop\n * and sequence animations on one or more components.\n *\n * The returned `AnimationControls` should be passed to the `animate` property\n * of the components you want to animate.\n *\n * These components can then be animated with the `start` method.\n *\n * ```jsx\n * import * as React from 'react'\n * import { motion, useAnimation } from 'framer-motion'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <motion.div animate={controls} />\n * }\n * ```\n *\n * @returns Animation controller with `start` and `stop` methods\n *\n * @public\n */\nfunction useAnimationControls() {\n    const controls = useConstant(animationControls);\n    useIsomorphicLayoutEffect(controls.mount, []);\n    return controls;\n}\nconst useAnimation = useAnimationControls;\n\nexport { useAnimation, useAnimationControls };\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\n\nconst FormContainer = styled(motion.div)`\n  max-width: 600px;\n  margin: 0 auto;\n  padding: 40px;\n  background: rgba(15, 15, 35, 0.8);\n  backdrop-filter: blur(20px);\n  border-radius: 20px;\n  border: 1px solid rgba(102, 126, 234, 0.3);\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);\n`;\n\nconst FormTitle = styled.h2`\n  font-size: 2.5rem;\n  font-weight: 700;\n  text-align: center;\n  margin-bottom: 30px;\n  background: var(--gradient-primary);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n`;\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst InputGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nconst Label = styled.label`\n  color: var(--text-primary);\n  font-weight: 600;\n  font-size: 14px;\n`;\n\nconst Input = styled.input`\n  padding: 15px;\n  border: 1px solid rgba(102, 126, 234, 0.3);\n  border-radius: 10px;\n  background: rgba(255, 255, 255, 0.05);\n  color: var(--text-primary);\n  font-size: 16px;\n  transition: all 0.3s ease;\n\n  &:focus {\n    outline: none;\n    border-color: var(--blue-primary);\n    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n  }\n\n  &::placeholder {\n    color: var(--text-secondary);\n  }\n`;\n\nconst TextArea = styled.textarea`\n  padding: 15px;\n  border: 1px solid rgba(102, 126, 234, 0.3);\n  border-radius: 10px;\n  background: rgba(255, 255, 255, 0.05);\n  color: var(--text-primary);\n  font-size: 16px;\n  min-height: 120px;\n  resize: vertical;\n  transition: all 0.3s ease;\n\n  &:focus {\n    outline: none;\n    border-color: var(--blue-primary);\n    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n  }\n\n  &::placeholder {\n    color: var(--text-secondary);\n  }\n`;\n\nconst SubmitButton = styled(motion.button)`\n  padding: 15px 30px;\n  background: var(--gradient-primary);\n  color: white;\n  border: none;\n  border-radius: 10px;\n  font-size: 16px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  position: relative;\n  overflow: hidden;\n\n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n\n  &::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n    transition: left 0.5s;\n  }\n\n  &:hover:not(:disabled)::before {\n    left: 100%;\n  }\n`;\n\nconst StatusMessage = styled(motion.div)`\n  padding: 15px;\n  border-radius: 10px;\n  text-align: center;\n  font-weight: 600;\n  margin-top: 20px;\n  background: ${props => props.success ? 'rgba(81, 207, 102, 0.1)' : 'rgba(255, 107, 107, 0.1)'};\n  border: 1px solid ${props => props.success ? 'rgba(81, 207, 102, 0.3)' : 'rgba(255, 107, 107, 0.3)'};\n  color: ${props => props.success ? '#51cf66' : '#ff6b6b'};\n`;\n\nconst ContactForm = () => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    subject: '',\n    message: ''\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [status, setStatus] = useState(null);\n\n  const handleChange = (e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    setStatus(null);\n\n    try {\n      // Using Formspree for simple form handling\n      const response = await fetch('https://formspree.io/f/YOUR_FORM_ID', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData)\n      });\n\n      if (response.ok) {\n        setStatus({ type: 'success', message: 'Message sent successfully! I\\'ll get back to you soon.' });\n        setFormData({ name: '', email: '', subject: '', message: '' });\n      } else {\n        throw new Error('Failed to send message');\n      }\n    } catch (error) {\n      setStatus({ type: 'error', message: 'Failed to send message. Please try again or contact me directly.' });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <FormContainer\n      initial={{ opacity: 0, y: 50 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.8 }}\n    >\n      <FormTitle>Get In Touch</FormTitle>\n      \n      <Form onSubmit={handleSubmit}>\n        <InputGroup>\n          <Label htmlFor=\"name\">Name</Label>\n          <Input\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            value={formData.name}\n            onChange={handleChange}\n            placeholder=\"Your name\"\n            required\n          />\n        </InputGroup>\n\n        <InputGroup>\n          <Label htmlFor=\"email\">Email</Label>\n          <Input\n            type=\"email\"\n            id=\"email\"\n            name=\"email\"\n            value={formData.email}\n            onChange={handleChange}\n            placeholder=\"your.email@example.com\"\n            required\n          />\n        </InputGroup>\n\n        <InputGroup>\n          <Label htmlFor=\"subject\">Subject</Label>\n          <Input\n            type=\"text\"\n            id=\"subject\"\n            name=\"subject\"\n            value={formData.subject}\n            onChange={handleChange}\n            placeholder=\"What's this about?\"\n            required\n          />\n        </InputGroup>\n\n        <InputGroup>\n          <Label htmlFor=\"message\">Message</Label>\n          <TextArea\n            id=\"message\"\n            name=\"message\"\n            value={formData.message}\n            onChange={handleChange}\n            placeholder=\"Tell me about your project, opportunity, or just say hello!\"\n            required\n          />\n        </InputGroup>\n\n        <SubmitButton\n          type=\"submit\"\n          disabled={isSubmitting}\n          whileHover={{ scale: 1.02 }}\n          whileTap={{ scale: 0.98 }}\n        >\n          {isSubmitting ? 'Sending...' : 'Send Message'}\n        </SubmitButton>\n\n        {status && (\n          <StatusMessage\n            success={status.type === 'success'}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.3 }}\n          >\n            {status.message}\n          </StatusMessage>\n        )}\n      </Form>\n    </FormContainer>\n  );\n};\n\nexport default ContactForm;\n","import React from 'react';\nimport { motion } from 'framer-motion';\nimport styled from 'styled-components';\nimport { useInView } from 'react-intersection-observer';\nimport { useAnimation } from 'framer-motion';\nimport ContactForm from './ContactForm';\n\nconst Section = styled.section`\n  padding: var(--section-padding);\n  background: var(--bg-primary);\n  position: relative;\n  overflow: hidden;\n`;\n\nconst Container = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 20px;\n`;\n\nconst SectionTitle = styled(motion.h2)`\n  font-family: var(--font-display);\n  font-size: 3rem;\n  font-weight: 900;\n  text-align: center;\n  margin-bottom: 80px;\n  position: relative;\n  background: var(--gradient-secondary);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  \n  &::after {\n    content: '';\n    position: absolute;\n    bottom: -20px;\n    left: 50%;\n    transform: translateX(-50%);\n    width: 100px;\n    height: 4px;\n    background: var(--gradient-primary);\n    border-radius: 2px;\n  }\n`;\n\nconst TitleIcon = styled.span`\n  font-size: 2.5rem;\n  margin-right: 20px;\n  background: var(--gradient-primary);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n`;\n\nconst ContactGrid = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 60px;\n  align-items: start;\n  \n  @media (max-width: 768px) {\n    grid-template-columns: 1fr;\n    gap: 40px;\n  }\n`;\n\nconst ContactInfo = styled(motion.div)`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n`;\n\nconst InfoCard = styled(motion.div)`\n  padding: 30px;\n  background: rgba(15, 15, 35, 0.8);\n  backdrop-filter: blur(20px);\n  border-radius: 15px;\n  border: 1px solid rgba(102, 126, 234, 0.3);\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);\n`;\n\nconst InfoIcon = styled.div`\n  font-size: 2rem;\n  margin-bottom: 15px;\n  color: var(--blue-primary);\n`;\n\nconst InfoTitle = styled.h3`\n  font-size: 1.5rem;\n  font-weight: 700;\n  margin-bottom: 10px;\n  color: var(--text-primary);\n`;\n\nconst InfoText = styled.p`\n  color: var(--text-secondary);\n  line-height: 1.6;\n  margin-bottom: 15px;\n`;\n\nconst ContactLinks = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n`;\n\nconst ContactLink = styled(motion.a)`\n  display: flex;\n  align-items: center;\n  gap: 15px;\n  padding: 15px 20px;\n  background: rgba(102, 126, 234, 0.1);\n  border: 1px solid rgba(102, 126, 234, 0.3);\n  border-radius: 10px;\n  color: var(--text-primary);\n  text-decoration: none;\n  transition: all 0.3s ease;\n  \n  &:hover {\n    background: rgba(102, 126, 234, 0.2);\n    border-color: var(--blue-primary);\n    transform: translateX(5px);\n  }\n`;\n\nconst LinkIcon = styled.span`\n  font-size: 1.5rem;\n`;\n\nconst LinkText = styled.span`\n  font-weight: 600;\n`;\n\nconst ContactSection = () => {\n  const [ref, inView] = useInView({\n    threshold: 0.1,\n    triggerOnce: false\n  });\n  \n  const controls = useAnimation();\n\n  React.useEffect(() => {\n    if (inView) {\n      controls.start('visible');\n    }\n  }, [controls, inView]);\n\n  const containerVariants = {\n    hidden: { opacity: 0, y: 50 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.8,\n        staggerChildren: 0.2\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 30 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        ease: [0.6, -0.05, 0.01, 0.99]\n      }\n    }\n  };\n\n  return (\n    <Section id=\"contact\" ref={ref}>\n      <Container>\n        <motion.div\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate={controls}\n        >\n          <SectionTitle>\n            <TitleIcon>📧</TitleIcon>\n            Contact\n          </SectionTitle>\n\n          <ContactGrid>\n            <ContactInfo>\n              <InfoCard variants={itemVariants}>\n                <InfoIcon>💼</InfoIcon>\n                <InfoTitle>Let's Work Together</InfoTitle>\n                <InfoText>\n                  I'm always interested in new opportunities, collaborations, and interesting projects. \n                  Whether you're looking for a security consultant, researcher, or just want to chat about \n                  cybersecurity and AI, I'd love to hear from you.\n                </InfoText>\n              </InfoCard>\n\n              <InfoCard variants={itemVariants}>\n                <InfoIcon>🚀</InfoIcon>\n                <InfoTitle>Quick Response</InfoTitle>\n                <InfoText>\n                  I typically respond to messages within 24 hours. For urgent matters, \n                  feel free to reach out through LinkedIn or GitHub.\n                </InfoText>\n              </InfoCard>\n\n              <ContactLinks>\n                <ContactLink\n                  href=\"mailto:aviral@example.com\"\n                  variants={itemVariants}\n                  whileHover={{ scale: 1.02 }}\n                  whileTap={{ scale: 0.98 }}\n                >\n                  <LinkIcon>📧</LinkIcon>\n                  <LinkText>aviral@example.com</LinkText>\n                </ContactLink>\n                \n                <ContactLink\n                  href=\"https://linkedin.com/in/aviralsrivastava23\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  variants={itemVariants}\n                  whileHover={{ scale: 1.02 }}\n                  whileTap={{ scale: 0.98 }}\n                >\n                  <LinkIcon>💼</LinkIcon>\n                  <LinkText>LinkedIn Profile</LinkText>\n                </ContactLink>\n                \n                <ContactLink\n                  href=\"https://github.com/Aviral2642\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  variants={itemVariants}\n                  whileHover={{ scale: 1.02 }}\n                  whileTap={{ scale: 0.98 }}\n                >\n                  <LinkIcon>🐙</LinkIcon>\n                  <LinkText>GitHub Profile</LinkText>\n                </ContactLink>\n              </ContactLinks>\n            </ContactInfo>\n\n            <motion.div variants={itemVariants}>\n              <ContactForm />\n            </motion.div>\n          </ContactGrid>\n        </motion.div>\n      </Container>\n    </Section>\n  );\n};\n\nexport default ContactSection;"],"names":["observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","map","concat","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","forEach","entry","_a","inView","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","useInView","delay","rootMargin","triggerOnce","skip","initialInView","onChange","ref","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result","animationControls","hasMounted","subscribers","Set","controls","subscribe","visualElement","add","start","definition","transitionOverride","invariant","animations","animateVisualElement","Promise","all","setValues","stop","values","value","stopAnimation","mount","useAnimation","useConstant","useIsomorphicLayoutEffect","FormContainer","styled","motion","div","_templateObject","_taggedTemplateLiteral","FormTitle","h2","_templateObject2","Form","form","_templateObject3","InputGroup","_templateObject4","Label","label","_templateObject5","Input","input","_templateObject6","TextArea","textarea","_templateObject7","SubmitButton","button","_templateObject8","StatusMessage","_templateObject9","props","success","ContactForm","formData","setFormData","useState","name","email","subject","message","isSubmitting","setIsSubmitting","status","setStatus","handleChange","e","_objectSpread","_jsxs","initial","opacity","y","animate","transition","duration","children","_jsx","onSubmit","async","preventDefault","fetch","method","headers","body","JSON","stringify","ok","Error","type","error","htmlFor","placeholder","required","disabled","whileHover","scale","whileTap","Section","section","Container","SectionTitle","TitleIcon","span","ContactGrid","ContactInfo","InfoCard","InfoIcon","InfoTitle","h3","InfoText","p","_templateObject0","ContactLinks","_templateObject1","ContactLink","a","_templateObject10","LinkIcon","_templateObject11","LinkText","_templateObject12","ContactSection","itemVariants","hidden","visible","ease","variants","staggerChildren","href","rel"],"sourceRoot":""}