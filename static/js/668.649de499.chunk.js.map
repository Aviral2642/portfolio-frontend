{"version":3,"file":"static/js/668.649de499.chunk.js","mappings":"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","sources":["../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","../node_modules/react-intersection-observer/src/useInView.tsx","data/projects.js","components/ProjectsSection.js","../node_modules/framer-motion/dist/es/animation/hooks/animation-controls.mjs","../node_modules/framer-motion/dist/es/animation/hooks/use-animation.mjs"],"sourcesContent":["import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>(onChange);\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element | undefined>(undefined);\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n","export const projects = [\n  {\n    id: 1,\n    title: 'AI Attack Mind Map',\n    description: 'The world\\'s most comprehensive AI security threat atlas covering LLMs, RAG, Agentic AI, RL, diffusion, MLOps, federated learning, and hardware side-channels',\n    longDescription: 'A detailed mind map of adversarial techniques, attack surfaces, and pivot paths across modern AI systems with operator-style decision trees inspired by Active Directory attack maps.',\n    technologies: ['OPML', 'XMind', 'AI Security', 'Threat Modeling'],\n    githubUrl: 'https://github.com/Aviral2642/AI-Attack-Mind-Map-Comprehensive-AI-Security-Threats-Attack-Vectors',\n    liveUrl: 'https://github.com/Aviral2642/AI-Attack-Mind-Map-Comprehensive-AI-Security-Threats-Attack-Vectors',\n    icon: '🧠',\n    featured: true,\n    category: 'research',\n    status: 'completed'\n  },\n  {\n    id: 2,\n    title: 'ZeroDayForge',\n    description: 'Advanced red team exploitation framework featuring payload generation, direct syscall injection, protocol fuzzing, and memory manipulation',\n    technologies: ['Python', 'Assembly', 'Red Team', 'Exploitation'],\n    githubUrl: 'https://github.com/Aviral2642/ZeroDayForge',\n    liveUrl: 'https://github.com/Aviral2642/ZeroDayForge',\n    icon: '🔨',\n    featured: true,\n    category: 'cybersecurity',\n    status: 'completed'\n  },\n  {\n    id: 3,\n    title: 'KernelGhost',\n    description: 'Next-generation offensive security framework combining stealthy eBPF-based rootkit capabilities with advanced hypervisor escape techniques',\n    technologies: ['eBPF', 'C', 'Kernel', 'Hypervisor'],\n    githubUrl: 'https://github.com/Aviral2642/kernelghost',\n    liveUrl: 'https://github.com/Aviral2642/kernelghost',\n    icon: '👻',\n    featured: false,\n    category: 'cybersecurity',\n    status: 'completed'\n  },\n  {\n    id: 4,\n    title: 'Polymorphic Shellcode Engine',\n    description: 'Next-generation engine for generating metamorphic shellcode payloads with built-in evasion capabilities for red team operations',\n    technologies: ['Python', 'Assembly', 'Evasion', 'Shellcode'],\n    githubUrl: 'https://github.com/Aviral2642/Polymorphic-Shellcode-Engine',\n    liveUrl: 'https://github.com/Aviral2642/Polymorphic-Shellcode-Engine',\n    icon: '🔀',\n    featured: false,\n    category: 'cybersecurity',\n    status: 'completed'\n  },\n  {\n    id: 5,\n    title: 'Adversary Emulation Framework',\n    description: 'Fully functional framework to simulate real-world threat actor behavior using MITRE ATT&CK techniques for red team assessments',\n    technologies: ['Python', 'MITRE ATT&CK', 'APT Simulation', 'Red Team'],\n    githubUrl: 'https://github.com/Aviral2642/adversary-emulation-framework',\n    liveUrl: 'https://github.com/Aviral2642/adversary-emulation-framework',\n    icon: '🛡️',\n    featured: false,\n    category: 'cybersecurity',\n    status: 'completed'\n  }\n];\n\nexport const getFeaturedProjects = () => projects.filter(project => project.featured);\nexport const getProjectsByCategory = (category) => projects.filter(project => project.category === category);\nexport const getProjectById = (id) => projects.find(project => project.id === id);\n","import React from 'react';\nimport { motion, useAnimation } from 'framer-motion';\nimport styled from 'styled-components';\nimport { useInView } from 'react-intersection-observer';\nimport { projects } from '../data/projects';\n\nconst Section = styled.section`\n  padding: var(--section-padding);\n  background: var(--bg-primary);\n  position: relative;\n  overflow: hidden;\n`;\n\nconst Container = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 20px;\n`;\n\nconst SectionTitle = styled(motion.h2)`\n  font-family: var(--font-display);\n  font-size: 3rem;\n  font-weight: 900;\n  text-align: center;\n  margin-bottom: 80px;\n  position: relative;\n  background: var(--gradient-primary);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  \n  &::after {\n    content: '';\n    position: absolute;\n    bottom: -20px;\n    left: 50%;\n    transform: translateX(-50%);\n    width: 100px;\n    height: 4px;\n    background: var(--gradient-secondary);\n    border-radius: 2px;\n  }\n`;\n\nconst TitleIcon = styled.span`\n  font-size: 2.5rem;\n  margin-right: 20px;\n  background: var(--gradient-secondary);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n`;\n\nconst ProjectsGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n  gap: 30px;\n`;\n\nconst ProjectCard = styled(motion.div)`\n  background: var(--bg-card);\n  border: 1px solid var(--border-color);\n  border-radius: var(--border-radius);\n  overflow: hidden;\n  transition: var(--transition-normal);\n  position: relative;\n  \n  &.featured {\n    grid-column: span 2;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    align-items: center;\n    \n    @media (max-width: 768px) {\n      grid-column: span 1;\n      display: block;\n    }\n  }\n  \n  &:hover {\n    transform: translateY(-10px);\n    border-color: var(--blue-primary);\n    box-shadow: var(--shadow-glow);\n  }\n`;\n\nconst ProjectImage = styled.div`\n  height: 200px;\n  background: var(--gradient-primary);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  overflow: hidden;\n  \n  .featured & {\n    height: 100%;\n  }\n`;\n\nconst ProjectIcon = styled.div`\n  font-size: 4rem;\n  color: var(--text-primary);\n  animation: iconPulse 3s ease-in-out infinite;\n  \n  @keyframes iconPulse {\n    0%, 100% { transform: scale(1); }\n    50% { transform: scale(1.1); }\n  }\n`;\n\nconst ProjectContent = styled.div`\n  padding: 30px;\n`;\n\nconst ProjectTitle = styled.h3`\n  font-size: 1.5rem;\n  font-weight: 700;\n  margin-bottom: 15px;\n  color: var(--text-primary);\n`;\n\nconst ProjectDescription = styled.p`\n  color: var(--text-secondary);\n  margin-bottom: 20px;\n  line-height: 1.6;\n`;\n\nconst TechTags = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  margin-bottom: 20px;\n`;\n\nconst TechTag = styled.span`\n  background: var(--bg-tertiary);\n  color: var(--blue-primary);\n  padding: 5px 12px;\n  border-radius: 20px;\n  font-size: 12px;\n  font-weight: 600;\n  border: 1px solid var(--blue-primary);\n`;\n\nconst ProjectLinks = styled.div`\n  display: flex;\n  gap: 15px;\n`;\n\nconst ProjectLink = styled(motion.a)`\n  display: inline-flex;\n  align-items: center;\n  gap: 8px;\n  color: var(--blue-primary);\n  text-decoration: none;\n  font-weight: 600;\n  transition: var(--transition-fast);\n  \n  &:hover {\n    text-shadow: 0 0 5px var(--blue-primary);\n  }\n`;\n\nconst ProjectsSection = () => {\n  const [ref, inView] = useInView({\n    threshold: 0.1,\n    triggerOnce: false\n  });\n  \n  const controls = useAnimation();\n\n  React.useEffect(() => {\n    if (inView) {\n      controls.start('visible');\n    }\n  }, [controls, inView]);\n\n  const containerVariants = {\n    hidden: { opacity: 0, y: 50 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.8,\n        staggerChildren: 0.2\n      }\n    }\n  };\n\n  const hoverVariants = {\n    scale: 1.05,\n    transition: { duration: 0.3 }\n  };\n\n  const tapVariants = {\n    scale: 0.95,\n    transition: { duration: 0.1 }\n  };\n\n  // Projects data is now imported from static data file\n\n  return (\n    <Section id=\"projects\" ref={ref}>\n      <Container>\n        <motion.div\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate={controls}\n        >\n          <SectionTitle>\n            <TitleIcon>🚀</TitleIcon>\n            Projects\n          </SectionTitle>\n\n          <ProjectsGrid>\n            {projects.map((project, index) => (\n              <ProjectCard\n                key={project.id}\n                className={project.featured ? 'featured' : ''}\n                variants={containerVariants}\n                whileHover={hoverVariants}\n                whileTap={tapVariants}\n                style={{ animationDelay: `${index * 0.1}s` }}\n              >\n                <ProjectImage>\n                  <ProjectIcon>{project.icon}</ProjectIcon>\n                </ProjectImage>\n                \n                <ProjectContent>\n                  <ProjectTitle>{project.title}</ProjectTitle>\n                  <ProjectDescription>{project.description}</ProjectDescription>\n                  \n                  <TechTags>\n                    {project.technologies.map((tech, techIndex) => (\n                      <TechTag key={techIndex}>{tech}</TechTag>\n                    ))}\n                  </TechTags>\n                  \n                  <ProjectLinks>\n                    <ProjectLink\n                      href={project.githubUrl}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <span>GitHub</span>\n                      <span>↗</span>\n                    </ProjectLink>\n                    {project.liveUrl && (\n                      <ProjectLink\n                        href={project.liveUrl}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                      >\n                        <span>Live Demo</span>\n                        <span>↗</span>\n                      </ProjectLink>\n                    )}\n                  </ProjectLinks>\n                </ProjectContent>\n              </ProjectCard>\n            ))}\n          </ProjectsGrid>\n        </motion.div>\n      </Container>\n    </Section>\n  );\n};\n\nexport default ProjectsSection;\n","import { invariant } from '../../utils/errors.mjs';\nimport { setValues } from '../../render/utils/setters.mjs';\nimport { animateVisualElement } from '../interfaces/visual-element.mjs';\n\nfunction stopAnimation(visualElement) {\n    visualElement.values.forEach((value) => value.stop());\n}\n/**\n * @public\n */\nfunction animationControls() {\n    /**\n     * Track whether the host component has mounted.\n     */\n    let hasMounted = false;\n    /**\n     * A collection of linked component animation controls.\n     */\n    const subscribers = new Set();\n    const controls = {\n        subscribe(visualElement) {\n            subscribers.add(visualElement);\n            return () => void subscribers.delete(visualElement);\n        },\n        start(definition, transitionOverride) {\n            invariant(hasMounted, \"controls.start() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            const animations = [];\n            subscribers.forEach((visualElement) => {\n                animations.push(animateVisualElement(visualElement, definition, {\n                    transitionOverride,\n                }));\n            });\n            return Promise.all(animations);\n        },\n        set(definition) {\n            invariant(hasMounted, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            return subscribers.forEach((visualElement) => {\n                setValues(visualElement, definition);\n            });\n        },\n        stop() {\n            subscribers.forEach((visualElement) => {\n                stopAnimation(visualElement);\n            });\n        },\n        mount() {\n            hasMounted = true;\n            return () => {\n                hasMounted = false;\n                controls.stop();\n            };\n        },\n    };\n    return controls;\n}\n\nexport { animationControls };\n","import { animationControls } from './animation-controls.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\n\n/**\n * Creates `AnimationControls`, which can be used to manually start, stop\n * and sequence animations on one or more components.\n *\n * The returned `AnimationControls` should be passed to the `animate` property\n * of the components you want to animate.\n *\n * These components can then be animated with the `start` method.\n *\n * ```jsx\n * import * as React from 'react'\n * import { motion, useAnimation } from 'framer-motion'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <motion.div animate={controls} />\n * }\n * ```\n *\n * @returns Animation controller with `start` and `stop` methods\n *\n * @public\n */\nfunction useAnimationControls() {\n    const controls = useConstant(animationControls);\n    useIsomorphicLayoutEffect(controls.mount, []);\n    return controls;\n}\nconst useAnimation = useAnimationControls;\n\nexport { useAnimation, useAnimationControls };\n"],"names":["observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","map","concat","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","forEach","entry","_a","inView","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","useInView","delay","rootMargin","triggerOnce","skip","initialInView","onChange","ref","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result","projects","title","description","longDescription","technologies","githubUrl","liveUrl","icon","featured","category","status","Section","styled","section","_templateObject","_taggedTemplateLiteral","Container","div","_templateObject2","SectionTitle","motion","h2","_templateObject3","TitleIcon","span","_templateObject4","ProjectsGrid","_templateObject5","ProjectCard","_templateObject6","ProjectImage","_templateObject7","ProjectIcon","_templateObject8","ProjectContent","_templateObject9","ProjectTitle","h3","_templateObject0","ProjectDescription","p","_templateObject1","TechTags","_templateObject10","TechTag","_templateObject11","ProjectLinks","_templateObject12","ProjectLink","a","_templateObject13","ProjectsSection","controls","useAnimation","start","containerVariants","hidden","opacity","y","visible","transition","duration","staggerChildren","hoverVariants","scale","tapVariants","_jsx","children","_jsxs","variants","initial","animate","project","index","className","whileHover","whileTap","style","animationDelay","tech","techIndex","href","rel","animationControls","hasMounted","subscribers","Set","subscribe","visualElement","add","definition","transitionOverride","invariant","animations","animateVisualElement","Promise","all","setValues","stop","values","value","stopAnimation","mount","useConstant","useIsomorphicLayoutEffect"],"sourceRoot":""}