{"version":3,"file":"static/js/779.ef878c4a.chunk.js","mappings":"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","sources":["components/ParticleField.js"],"sourcesContent":["import React, { useRef, useMemo } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\n\nconst ParticleField = () => {\n  const meshRef = useRef();\n  const particleCount = 2000;\n\n  const particles = useMemo(() => {\n    const positions = new Float32Array(particleCount * 3);\n    const colors = new Float32Array(particleCount * 3);\n    const sizes = new Float32Array(particleCount);\n    const velocities = new Float32Array(particleCount * 3);\n\n    for (let i = 0; i < particleCount; i++) {\n      const i3 = i * 3;\n      \n      // Random positions in a large sphere\n      const radius = Math.random() * 20 + 5;\n      const theta = Math.random() * Math.PI * 2;\n      const phi = Math.acos(Math.random() * 2 - 1);\n      \n      positions[i3] = radius * Math.sin(phi) * Math.cos(theta);\n      positions[i3 + 1] = radius * Math.sin(phi) * Math.sin(theta);\n      positions[i3 + 2] = radius * Math.cos(phi);\n      \n      // Gradient colors from blue to purple to pink\n      const colorMix = Math.random();\n      let r, g, b;\n      \n      if (colorMix < 0.33) {\n        // Blue to Purple\n        const t = colorMix * 3;\n        r = 0.4 + t * 0.2;\n        g = 0.5 + t * 0.1;\n        b = 0.9 - t * 0.2;\n      } else if (colorMix < 0.66) {\n        // Purple to Pink\n        const t = (colorMix - 0.33) * 3;\n        r = 0.6 + t * 0.3;\n        g = 0.6 + t * 0.1;\n        b = 0.7 - t * 0.3;\n      } else {\n        // Pink to Hot Pink\n        const t = (colorMix - 0.66) * 3;\n        r = 0.9 + t * 0.1;\n        g = 0.7 - t * 0.2;\n        b = 0.4 + t * 0.3;\n      }\n      \n      colors[i3] = r;\n      colors[i3 + 1] = g;\n      colors[i3 + 2] = b;\n      \n      // Random sizes\n      sizes[i] = Math.random() * 2 + 0.5;\n      \n      // Random velocities\n      velocities[i3] = (Math.random() - 0.5) * 0.02;\n      velocities[i3 + 1] = (Math.random() - 0.5) * 0.02;\n      velocities[i3 + 2] = (Math.random() - 0.5) * 0.02;\n    }\n\n    return { positions, colors, sizes, velocities };\n  }, []);\n\n  useFrame((state) => {\n    if (meshRef.current) {\n      const positions = meshRef.current.geometry.attributes.position.array;\n      const time = state.clock.getElapsedTime();\n      \n      for (let i = 0; i < particleCount; i++) {\n        const i3 = i * 3;\n        \n        // Update positions with velocity and time-based movement\n        positions[i3] += particles.velocities[i3] + Math.sin(time + i * 0.01) * 0.001;\n        positions[i3 + 1] += particles.velocities[i3 + 1] + Math.cos(time + i * 0.01) * 0.001;\n        positions[i3 + 2] += particles.velocities[i3 + 2] + Math.sin(time * 0.5 + i * 0.01) * 0.001;\n        \n        // Reset particles that go too far\n        const distance = Math.sqrt(\n          positions[i3] ** 2 + \n          positions[i3 + 1] ** 2 + \n          positions[i3 + 2] ** 2\n        );\n        \n        if (distance > 25) {\n          const radius = Math.random() * 5 + 15;\n          const theta = Math.random() * Math.PI * 2;\n          const phi = Math.acos(Math.random() * 2 - 1);\n          \n          positions[i3] = radius * Math.sin(phi) * Math.cos(theta);\n          positions[i3 + 1] = radius * Math.sin(phi) * Math.sin(theta);\n          positions[i3 + 2] = radius * Math.cos(phi);\n        }\n      }\n      \n      meshRef.current.geometry.attributes.position.needsUpdate = true;\n      meshRef.current.rotation.y += 0.001;\n    }\n  });\n\n  return (\n    <points ref={meshRef}>\n      <bufferGeometry>\n        <bufferAttribute\n          attach=\"attributes-position\"\n          count={particleCount}\n          array={particles.positions}\n          itemSize={3}\n        />\n        <bufferAttribute\n          attach=\"attributes-color\"\n          count={particleCount}\n          array={particles.colors}\n          itemSize={3}\n        />\n        <bufferAttribute\n          attach=\"attributes-size\"\n          count={particleCount}\n          array={particles.sizes}\n          itemSize={1}\n        />\n      </bufferGeometry>\n      <pointsMaterial\n        size={0.1}\n        vertexColors\n        transparent\n        opacity={0.8}\n        sizeAttenuation\n        blending={THREE.AdditiveBlending}\n      />\n    </points>\n  );\n};\n\nexport default ParticleField;\n"],"names":["ParticleField","meshRef","useRef","particleCount","particles","useMemo","positions","Float32Array","colors","sizes","velocities","i","i3","radius","Math","random","theta","PI","phi","acos","sin","cos","colorMix","r","g","b","t","useFrame","state","current","geometry","attributes","position","array","time","clock","getElapsedTime","sqrt","needsUpdate","rotation","y","_jsxs","ref","children","_jsx","attach","count","itemSize","size","vertexColors","transparent","opacity","sizeAttenuation","blending","THREE"],"sourceRoot":""}